/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-engines",
factory: function (require) {
var plugin=(()=>{var l=Object.create,s=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var x=e=>s(e,"__esModule",{value:!0});var c=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var w=(e,r)=>{for(var n in r)s(e,n,{get:r[n],enumerable:!0})},R=(e,r,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of C(r))!y.call(e,o)&&o!=="default"&&s(e,o,{get:()=>r[o],enumerable:!(n=v(r,o))||n.enumerable});return e},g=e=>R(x(s(e!=null?l(u(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var N={};w(N,{default:()=>b});var p=g(c("@yarnpkg/core")),t;(function(n){n.Yarn="Yarn",n.Console="Console"})(t||(t={}));var i=class{constructor(r){this.throwWrongEngineError=(r,n)=>{let o=`The current ${this.engine} version ${r} does not satisfy the required version ${n}.`;switch(this.errorReporter){case t.Yarn:this.reportYarnError(o);break;case t.Console:default:this.reportConsoleError(o);break}};this.reportYarnError=r=>{throw new p.ReportError(p.MessageName.UNNAMED,r)};this.reportConsoleError=r=>{console.error(r),process.exit(1)};this.errorReporter=r.errorReporter}};var f=g(c("semver"));var a=class extends i{get engine(){return"Node"}verifyEngine(r){let n=r.node;n!=null&&((0,f.satisfies)(process.version,n)||this.throwWrongEngineError(process.version.replace(/^v/i,""),n.replace(/^v/i,"")))}};var E=g(c("semver")),h=g(c("@yarnpkg/core"));var d=class extends i{get engine(){return"Yarn"}verifyEngine(r){let n=r.yarn;n!=null&&((0,E.satisfies)(h.YarnVersion,n)||this.throwWrongEngineError(h.YarnVersion,n))}};var m=e=>r=>{let{engines:n={}}=r.getWorkspaceByCwd(r.cwd).manifest.raw,o={errorReporter:e};[new a(o),new d(o)].forEach(k=>k.verifyEngine(n))},Y={hooks:{validateProject:m(t.Yarn),setupScriptEnvironment:m(t.Console)}},b=Y;return N;})();
return plugin;
}
};
